parameters:
  baseName: ''
  platform: ''

jobs:
  - job: ${{parameters.baseName}}
    pool: { vmImage: 'windows-2019' }
    timeoutInMinutes: 120

    strategy:
      matrix:
        Release:
          configName: Release
          buildConfig: Release
          installClang: false
          configArgs: ''
        #Debug:
        #  configName: Debug
        #  buildConfig: Debug
        #  installClang: false
        #  configArgs: ''
        #ClangLTO:
        #  configName: ClangLTO
        #  buildConfig: Release
        #  installClang: true
        #  configArgs:
        #    -T LLVM
        #    -DLLVM_ENABLE_LTO=Thin

    steps:
    - checkout: self
      submodules: recursive

    # Install Clang 9 for configurations that need it.
    - script: |
        echo on
        curl -L -o installLLVM.exe http://releases.llvm.org/9.0.0/LLVM-9.0.0-win64.exe || exit 1
        start /wait installLLVM.exe /S || exit 1
        dir "C:\Program Files\LLVM"
      displayName: Install Clang 9
      workingDirectory: $(Pipeline.Workspace)
      condition: and(succeeded(), eq(variables['installClang'], 'true'))

    - powershell: |
        $OldPath = [System.Environment]::GetEnvironmentVariable("Path", [System.EnvironmentVariableTarget]::User)
        [System.Environment]::SetEnvironmentVariable("Path", $OldPath + ";C:\Program Files\LLVM\bin", [System.EnvironmentVariableTarget]::User)
      displayName: Set Clang PATH
      condition: and(succeeded(), eq(variables['installClang'], 'true'))

    - script: |
        echo %PATH%
        clang -v
      displayName: Debug PATH
      condition: and(succeeded(), eq(variables['installClang'], 'true'))

    # Configure LLVM
    - template: /azure-pipelines/cmake-configure-step-template.yml
      parameters:
        cmakeArgs:
          -G "Visual Studio 16 2019" -A ${{parameters.platform}}
          $(configArgs)

    # Build LLVM
    - task: MSBuild@1
      displayName: Build LLVM
      inputs:
        solution: $(Build.ArtifactStagingDirectory)/llvm/INSTALL.vcxproj
        configuration: $(buildConfig)

    # The LLVM install doesn't include PDB files, so manually copy them to the install directory
    - task: CopyFiles@2
      displayName: Copy PDBs
      inputs:
        sourceFolder: $(Build.ArtifactStagingDirectory)/llvm
        contents: '**/*.pdb'
        targetFolder: $(Build.ArtifactStagingDirectory)/install/llvm

    # Publish the install as an artifact
    - template: /azure-pipelines/publish-steps-template.yml
      parameters:
        artifactName: ${{parameters.baseName}}_$(configName)